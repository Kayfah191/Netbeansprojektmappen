
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Admin
 */

public class RegistreringAndringavAgent extends javax.swing.JFrame {
    
    private InfDB idb;
    Connection con;
        





//try {
//            con = DriverManager.getConnection ("jdbc:mysql://localhost:3306/mibdb", "mibdba", "mibkey");
//        } catch (SQLException ex) {
//            Logger.getLogger(RegistreringAndringavAgent.class.getName()).log(Level.SEVERE, null, ex);
//        }

    
    /**
     * Creates new form NyregistreringAvAgent
     */
    public RegistreringAndringavAgent() {
        initComponents();
//        initDBConnection();
        
        try{
            idb = new InfDB("mibdb", "3306", "mibdba","mibkey");
            con = DriverManager.getConnection ("jdbc:mysql://localhost:3306/mibdb", "mibdba", "mibkey");
            System.out.println("Allt fungerar (hittills))");
        }
        
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LaggTill = new javax.swing.JButton();
        TaBortAgent = new javax.swing.JButton();
        UppdateraAgent = new javax.swing.JButton();
        RegistreraAndraAgent = new javax.swing.JLabel();
        NamnLabel = new javax.swing.JLabel();
        TelefonTextfield = new javax.swing.JTextField();
        AgentIDLabel = new javax.swing.JLabel();
        NamnTextfield = new javax.swing.JTextField();
        TelefonLabel = new javax.swing.JLabel();
        AnstDatumLabel = new javax.swing.JLabel();
        AdminLabel = new javax.swing.JLabel();
        EpostLabel = new javax.swing.JLabel();
        LosenordLabel = new javax.swing.JLabel();
        AnstDatumTextfield = new javax.swing.JTextField();
        AgentIdTextfield = new javax.swing.JTextField();
        AdminTextfield = new javax.swing.JTextField();
        EpostTextfield = new javax.swing.JTextField();
        LosenordTextfield = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        Avbryt = new javax.swing.JButton();
        VisaAgent = new javax.swing.JButton();
        OmradeTextfield = new javax.swing.JTextField();
        OmradeLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Rensa = new javax.swing.JButton();
        Kontorschef = new javax.swing.JButton();
        Omradeschef = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableKontorschef = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        Tableomradeschef = new javax.swing.JTable();
        Agenter = new javax.swing.JLabel();
        ChefKontorlabel = new javax.swing.JLabel();
        OmradejLabel2 = new javax.swing.JLabel();
        ChefOmradejTextField1 = new javax.swing.JTextField();
        ChefKontorjTextField2 = new javax.swing.JTextField();
        UppdateraKontorsChef = new javax.swing.JButton();
        UppdateraOmradesChef = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LaggTill.setText("Lägg till agent");
        LaggTill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaggTillActionPerformed(evt);
            }
        });

        TaBortAgent.setText("Ta bort agent");
        TaBortAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaBortAgentActionPerformed(evt);
            }
        });

        UppdateraAgent.setText("Uppdatera agent");
        UppdateraAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UppdateraAgentActionPerformed(evt);
            }
        });

        RegistreraAndraAgent.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RegistreraAndraAgent.setText("Registrering och borttagelse av agenter samt ändring av agenter & chefer");

        NamnLabel.setText("Namn:");

        AgentIDLabel.setText("Agent ID:");

        TelefonLabel.setText("Telefon:");

        AnstDatumLabel.setText("Anställningsdatum:");

        AdminLabel.setText("Admin:");

        EpostLabel.setText("E-post:");

        LosenordLabel.setText("Lösenord:");

        AgentIdTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgentIdTextfieldActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Agent ID", "Namn", "Telefon", "AnstDatum", "Admin", "E-post", "Lösenord", "Område"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Avbryt.setText("Avbryt");
        Avbryt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AvbrytActionPerformed(evt);
            }
        });

        VisaAgent.setText("Visa agenter");
        VisaAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisaAgentActionPerformed(evt);
            }
        });

        OmradeTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OmradeTextfieldActionPerformed(evt);
            }
        });

        OmradeLabel.setText("Område:");

        jLabel1.setText("För att Lägga till, Uppdatera eller Ta bort - tryck nedan");

        Rensa.setText("Rensa");
        Rensa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RensaActionPerformed(evt);
            }
        });

        Kontorschef.setText("Visa kontorschef");
        Kontorschef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KontorschefActionPerformed(evt);
            }
        });

        Omradeschef.setText("Visa Områdeschef");
        Omradeschef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OmradeschefActionPerformed(evt);
            }
        });

        TableKontorschef.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Agent ID", "Kontor"
            }
        ));
        TableKontorschef.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableKontorschefMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableKontorschef);

        Tableomradeschef.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Agent ID", "Område"
            }
        ));
        Tableomradeschef.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableomradeschefMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(Tableomradeschef);

        Agenter.setText("Agenter");

        ChefKontorlabel.setText("Chef över kontor:");

        OmradejLabel2.setText("Chef över område:");

        ChefOmradejTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChefOmradejTextField1ActionPerformed(evt);
            }
        });

        UppdateraKontorsChef.setText("Uppdatera kontorschef");
        UppdateraKontorsChef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UppdateraKontorsChefActionPerformed(evt);
            }
        });

        UppdateraOmradesChef.setText("Uppdatera områdeschef");
        UppdateraOmradesChef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UppdateraOmradesChefActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NamnLabel)
                            .addComponent(AgentIDLabel)
                            .addComponent(TelefonLabel)
                            .addComponent(AnstDatumLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OmradeLabel)
                                    .addComponent(LosenordLabel)
                                    .addComponent(EpostLabel)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(AdminLabel)
                                .addGap(64, 64, 64)))
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NamnTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TelefonTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AnstDatumTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AdminTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AgentIdTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EpostTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(111, 111, 111)
                                        .addComponent(Kontorschef)
                                        .addGap(53, 53, 53)
                                        .addComponent(VisaAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(46, 46, 46)
                                        .addComponent(Omradeschef, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(38, 38, 38)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel1)
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(26, 26, 26))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Agenter)
                                                .addGap(251, 251, 251)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(ChefKontorlabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(ChefKontorjTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(12, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(UppdateraKontorsChef)
                                                            .addComponent(UppdateraOmradesChef)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(OmradejLabel2)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(ChefOmradejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                                .addContainerGap())))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OmradeTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LosenordTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(LaggTill)
                        .addGap(38, 38, 38)
                        .addComponent(UppdateraAgent)
                        .addGap(31, 31, 31)
                        .addComponent(Rensa)
                        .addGap(26, 26, 26)
                        .addComponent(TaBortAgent)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Avbryt)
                        .addGap(53, 53, 53))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RegistreraAndraAgent)
                .addGap(400, 400, 400))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 88, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ChefKontorjTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChefKontorlabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(AgentIdTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(AgentIDLabel))
                            .addComponent(UppdateraKontorsChef))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ChefOmradejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OmradejLabel2))
                                .addGap(18, 18, 18)
                                .addComponent(UppdateraOmradesChef)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(NamnTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NamnLabel))
                                .addGap(53, 53, 53)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TelefonTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TelefonLabel))
                                .addGap(58, 58, 58)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AnstDatumTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AnstDatumLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AdminLabel)
                                    .addComponent(AdminTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(EpostTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EpostLabel))
                                .addGap(50, 50, 50))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(RegistreraAndraAgent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Agenter)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LosenordTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LosenordLabel))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(OmradeTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OmradeLabel))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(LaggTill)
                                    .addComponent(UppdateraAgent)
                                    .addComponent(Rensa)
                                    .addComponent(TaBortAgent))
                                .addGap(16, 16, 16))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Avbryt)
                                .addGap(25, 25, 25))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(VisaAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Kontorschef, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Omradeschef, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LaggTillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaggTillActionPerformed
        //Lägg till Agent
        
        int confirmResult = JOptionPane.showConfirmDialog(this, "Vill du verkligen lägga till dessa data?", "Bekräfta", JOptionPane.YES_NO_OPTION);

        if (confirmResult == JOptionPane.YES_OPTION) {
            // Om användare trycker på "Ja"
            
            if (AgentIdTextfield.getText().equals("") || NamnTextfield.getText().equals("") || TelefonTextfield.getText().equals("") || AnstDatumTextfield.getText().equals("") || AdminTextfield.getText().equals("") || EpostTextfield.getText().equals("") || LosenordTextfield.getText().equals("") || OmradeTextfield.getText().equals("")) {
       
                // Om något av fälten lämnas tomma
                
        JOptionPane.showMessageDialog(this, "Var god fyll i all data!");
            } else {
                
        // Om all data fylls i
        // Samlar data i String Arrays
        String data[] = {AgentIdTextfield.getText(), NamnTextfield.getText(), TelefonTextfield.getText(), AnstDatumTextfield.getText(), AdminTextfield.getText(), EpostTextfield.getText(), LosenordTextfield.getText(), OmradeTextfield.getText()}; 

        DefaultTableModel tblModel = (DefaultTableModel) Table.getModel();
        // Adderar String array data
        tblModel.addRow(data); // rad adderad

        // Lyckat-meddelande
        JOptionPane.showMessageDialog(this, "Data tillagd!");
        // Rensar textfält för ny uppgift
        AgentIdTextfield.setText("");
        NamnTextfield.setText("");
        TelefonTextfield.setText("");
        AnstDatumTextfield.setText("");
        AdminTextfield.setText("");
        EpostTextfield.setText("");
        LosenordTextfield.setText("");
        OmradeTextfield.setText("");
        }
        } 
       
    }//GEN-LAST:event_LaggTillActionPerformed

    private void UppdateraAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UppdateraAgentActionPerformed
        //Uppdatera AgentInfo
       
        int confirmResult = JOptionPane.showConfirmDialog(this, "Vill du verkligen uppdatera dessa data?", "Bekräfta", JOptionPane.YES_NO_OPTION);

        if (confirmResult == JOptionPane.YES_OPTION) {
            // Användaren tryckte på "Ja"
            
                if (AgentIdTextfield.getText().equals("") || NamnTextfield.getText().equals("") || TelefonTextfield.getText().equals("") || AnstDatumTextfield.getText().equals("") || AdminTextfield.getText().equals("") || EpostTextfield.getText().equals("") || LosenordTextfield.getText().equals("") || OmradeTextfield.getText().equals("")) {
       
                    // Om någon av fälten lämnas tomma
             JOptionPane.showMessageDialog(this, "Var god fyll i all data!");
        } else {
                    
        // Om all data fylls i
        DefaultTableModel tblModel = (DefaultTableModel) Table.getModel();

        String AgentID = AgentIdTextfield.getText();
        String Namn = NamnTextfield.getText();
        String Telefon = TelefonTextfield.getText();
        String Anstallningsdatum = AnstDatumTextfield.getText();
        String Admin = AdminTextfield.getText();
        String Epost = EpostTextfield.getText();
        String Losenord = LosenordTextfield.getText();
        String Omrade = OmradeTextfield.getText();

        tblModel.setValueAt(AgentID, Table.getSelectedRow(), 0);
        tblModel.setValueAt(Namn, Table.getSelectedRow(), 1);
        tblModel.setValueAt(Telefon, Table.getSelectedRow(), 2);
        tblModel.setValueAt(Anstallningsdatum, Table.getSelectedRow(), 3);
        tblModel.setValueAt(Admin, Table.getSelectedRow(), 4);
        tblModel.setValueAt(Epost, Table.getSelectedRow(), 5);
        tblModel.setValueAt(Losenord, Table.getSelectedRow(), 6);
        tblModel.setValueAt(Omrade, Table.getSelectedRow(), 7);

        JOptionPane.showMessageDialog(this, "Uppdatering lyckades!");
        }
        } 
       
    }//GEN-LAST:event_UppdateraAgentActionPerformed

    private void AvbrytActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AvbrytActionPerformed
        //Avbryt
                  JFrame frame = new JFrame("Avbryt");
                  int userChoice = JOptionPane.showConfirmDialog(frame, "Är du säker på att du vill avbryta?", "Avbryt",
                JOptionPane.YES_NO_OPTION);
                  
        if(userChoice == JOptionPane.YES_OPTION)
            // Ifall användaren väljer "Ja"
        {
            System.exit(0);
        }
    }//GEN-LAST:event_AvbrytActionPerformed

    private void TaBortAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaBortAgentActionPerformed
        //Ta bort agent
        //Hämta tabell
        
        DefaultTableModel tblModel = (DefaultTableModel) Table.getModel();
        
        //Frågar om rad ska tas bort
        
         JFrame frame = new JFrame("Ta bort");
            int userChoice = JOptionPane.showConfirmDialog(frame, "Är du säker på att du vill ta bort agenten?", "Ta bort",
        JOptionPane.YES_NO_OPTION);

            if (userChoice == JOptionPane.YES_OPTION) {
                // Ifall användaren väljer "Ja"
            if (Table.getSelectedRowCount() == 1) {
                // Om en rad är vald, så radera
            tblModel.removeRow(Table.getSelectedRow());
            } else {
            if (Table.getRowCount() == 0) {
            // Om tabellen är tom och saknar data så visas ett meddelande
            JOptionPane.showMessageDialog(this, "Tabellen är tom");
            } else {
            // Om tabellen inte är tom men rad är inte vald eller flera rader är valda
            JOptionPane.showMessageDialog(this, "Var god välj En rad från Agent-listan");
            }
            }
            }
        
    }//GEN-LAST:event_TaBortAgentActionPerformed

    private void AgentIdTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgentIdTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AgentIdTextfieldActionPerformed

    private void VisaAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisaAgentActionPerformed

        try {
            // Ska visa alla registerade agenter

            con = DriverManager.getConnection ("jdbc:mysql://localhost:3306/mibdb", "mibdba", "mibkey");
        } catch (SQLException ex) {
            Logger.getLogger(RegistreringAndringavAgent.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Knapp för att visa alla registerade agenter

        
        String sql ="SELECT * FROM Agent";
        try{
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = (DefaultTableModel)Table.getModel();
            model.setRowCount(0);
            while(rs.next()){
            model.addRow(new String[] { rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8) });            }
        }catch(Exception ex){
            System.out.println("Error : " +ex.getMessage());
        }
    }//GEN-LAST:event_VisaAgentActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // Visar data i textfälten
        
        DefaultTableModel tblModel = (DefaultTableModel) Table.getModel();
        
        // Visar data i valt textfält
        
        String tblAgent_ID = tblModel.getValueAt(Table.getSelectedRow(),0).toString();
        String tblNamn = tblModel.getValueAt(Table.getSelectedRow(),1).toString();
        String tblTelefon = tblModel.getValueAt(Table.getSelectedRow(),2).toString();
        String tblAnstallningsdatum = tblModel.getValueAt(Table.getSelectedRow(),3).toString();
        String tblAdministrator = tblModel.getValueAt(Table.getSelectedRow(),4).toString();
        String tblEpost = tblModel.getValueAt(Table.getSelectedRow(),5).toString();
        String tblLosenord = tblModel.getValueAt(Table.getSelectedRow(),6).toString();
        String tblOmrade = tblModel.getValueAt(Table.getSelectedRow(),7).toString();
        
        // Välj till textfält
        
        AgentIdTextfield.setText(tblAgent_ID);
        NamnTextfield.setText(tblNamn);
        TelefonTextfield.setText(tblTelefon);
        AnstDatumTextfield.setText(tblAnstallningsdatum);
        AdminTextfield.setText(tblAdministrator);
        EpostTextfield.setText(tblEpost);
        LosenordTextfield.setText(tblLosenord);
        OmradeTextfield.setText(tblOmrade);
        
    }//GEN-LAST:event_TableMouseClicked

    private void OmradeTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OmradeTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OmradeTextfieldActionPerformed

    private void RensaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RensaActionPerformed
        // Rensar allt i textfälten
        
        AgentIdTextfield.setText(null);
        NamnTextfield.setText(null);
        TelefonTextfield.setText(null);
        AnstDatumTextfield.setText(null);
        AdminTextfield.setText(null);
        EpostTextfield.setText(null);
        LosenordTextfield.setText(null);
        OmradeTextfield.setText(null);
        ChefOmradejTextField1.setText(null);
        ChefKontorjTextField2.setText(null);
        
    }//GEN-LAST:event_RensaActionPerformed

    private void KontorschefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KontorschefActionPerformed
        // Visar data över kontorschefer
        
         try {
            // Ska visa alla registerade kontorschefer

            con = DriverManager.getConnection ("jdbc:mysql://localhost:3306/mibdb", "mibdba", "mibkey");
        } catch (SQLException ex) {
            Logger.getLogger(RegistreringAndringavAgent.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String sql ="SELECT * FROM kontorschef";
        try{
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = (DefaultTableModel)TableKontorschef.getModel();
            model.setRowCount(0);
            while(rs.next()){
            model.addRow(new String[] { rs.getString(1), rs.getString(2)});            }
        }catch(Exception ex){
            System.out.println("Error : " +ex.getMessage());
        }
        
    }//GEN-LAST:event_KontorschefActionPerformed

    private void OmradeschefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OmradeschefActionPerformed
        // Visar data över områdeschefer
        
        try {
            // Ska visa alla registerade områdeschefer

            con = DriverManager.getConnection ("jdbc:mysql://localhost:3306/mibdb", "mibdba", "mibkey");
        } catch (SQLException ex) {
            Logger.getLogger(RegistreringAndringavAgent.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String sql ="SELECT * FROM omradeschef";
        try{
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = (DefaultTableModel)Tableomradeschef.getModel();
            model.setRowCount(0);
            while(rs.next()){
            model.addRow(new String[] { rs.getString(1), rs.getString(2)});            }
        }catch(Exception ex){
            System.out.println("Error : " +ex.getMessage());
        }
        
    }//GEN-LAST:event_OmradeschefActionPerformed

    private void ChefOmradejTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChefOmradejTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChefOmradejTextField1ActionPerformed

    private void UppdateraKontorsChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UppdateraKontorsChefActionPerformed
        // Uppdaterar kontorschef
        
        int confirmResult = JOptionPane.showConfirmDialog(this, "Vill du verkligen uppdatera dessa data?", "Bekräfta", JOptionPane.YES_NO_OPTION);

        if (confirmResult == JOptionPane.YES_OPTION) {
        // Användaren tryckte på "Ja"
        
        if (AgentIdTextfield.getText().equals("") || ChefKontorjTextField2.getText().equals("")) {
        
        // Om någon av fälten lämnas tomma
        JOptionPane.showMessageDialog(this, "Var god välj rad från tabellen!");
        } else {
            
        // Om all data fylls i
        DefaultTableModel tblModel = (DefaultTableModel) TableKontorschef.getModel();

        String AgentID = AgentIdTextfield.getText();
        String Kontor = ChefKontorjTextField2.getText();

        tblModel.setValueAt(AgentID, TableKontorschef.getSelectedRow(), 0);
        tblModel.setValueAt(Kontor, TableKontorschef.getSelectedRow(), 1);

        JOptionPane.showMessageDialog(this, "Uppdatering lyckades!");
        }
        }
       
    }//GEN-LAST:event_UppdateraKontorsChefActionPerformed

    private void TableKontorschefMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableKontorschefMouseClicked
        // Visar data i textfälten
        
        DefaultTableModel tblModel = (DefaultTableModel) TableKontorschef.getModel();
        
        // Visar data i valt textfält
        
        String tblAgent_ID = tblModel.getValueAt(TableKontorschef.getSelectedRow(),0).toString();
        String tblKontor = tblModel.getValueAt(TableKontorschef.getSelectedRow(),1).toString();
        
        // Välj till textfält
        
        AgentIdTextfield.setText(tblAgent_ID);
        ChefKontorjTextField2.setText(tblKontor);
            
    }//GEN-LAST:event_TableKontorschefMouseClicked

    private void TableomradeschefMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableomradeschefMouseClicked
        // Visar data i textfälten
        
        DefaultTableModel tblModel = (DefaultTableModel) Tableomradeschef.getModel();
        
        // Visar data i valt textfält
        
        String tblAgent_ID = tblModel.getValueAt(Tableomradeschef.getSelectedRow(),0).toString();
        String tblOmråde = tblModel.getValueAt(Tableomradeschef.getSelectedRow(),1).toString();
        
        // Välj till textfält
        
        AgentIdTextfield.setText(tblAgent_ID);
        ChefOmradejTextField1.setText(tblOmråde);
            
    }//GEN-LAST:event_TableomradeschefMouseClicked

    private void UppdateraOmradesChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UppdateraOmradesChefActionPerformed
        // Uppdaterar områdeschef
        
        
        int confirmResult = JOptionPane.showConfirmDialog(this, "Vill du verkligen uppdatera dessa data?", "Bekräfta", JOptionPane.YES_NO_OPTION);

        if (confirmResult == JOptionPane.YES_OPTION) {
            
        // Användaren tryckte på "Ja"
        if (AgentIdTextfield.getText().equals("") || ChefOmradejTextField1.getText().equals("")) {
            
        // Om någon av fälten lämnas tomma
        JOptionPane.showMessageDialog(this, "Var god välj rad från tabellen!");
        } else {
            
        // Om all data fylls i
        
        DefaultTableModel tblModel = (DefaultTableModel) Tableomradeschef.getModel();

        String AgentID = AgentIdTextfield.getText();
        String Område = ChefOmradejTextField1.getText();

        tblModel.setValueAt(AgentID, Tableomradeschef.getSelectedRow(), 0);
        tblModel.setValueAt(Område, Tableomradeschef.getSelectedRow(), 1);

        JOptionPane.showMessageDialog(this, "Uppdatering lyckades!");
        }
        }
           
    }//GEN-LAST:event_UppdateraOmradesChefActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistreringAndringavAgent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistreringAndringavAgent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistreringAndringavAgent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistreringAndringavAgent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistreringAndringavAgent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AdminLabel;
    private javax.swing.JTextField AdminTextfield;
    private javax.swing.JLabel AgentIDLabel;
    private javax.swing.JTextField AgentIdTextfield;
    private javax.swing.JLabel Agenter;
    private javax.swing.JLabel AnstDatumLabel;
    private javax.swing.JTextField AnstDatumTextfield;
    private javax.swing.JButton Avbryt;
    private javax.swing.JTextField ChefKontorjTextField2;
    private javax.swing.JLabel ChefKontorlabel;
    private javax.swing.JTextField ChefOmradejTextField1;
    private javax.swing.JLabel EpostLabel;
    private javax.swing.JTextField EpostTextfield;
    private javax.swing.JButton Kontorschef;
    private javax.swing.JButton LaggTill;
    private javax.swing.JLabel LosenordLabel;
    private javax.swing.JTextField LosenordTextfield;
    private javax.swing.JLabel NamnLabel;
    private javax.swing.JTextField NamnTextfield;
    private javax.swing.JLabel OmradeLabel;
    private javax.swing.JTextField OmradeTextfield;
    private javax.swing.JLabel OmradejLabel2;
    private javax.swing.JButton Omradeschef;
    private javax.swing.JLabel RegistreraAndraAgent;
    private javax.swing.JButton Rensa;
    private javax.swing.JButton TaBortAgent;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableKontorschef;
    private javax.swing.JTable Tableomradeschef;
    private javax.swing.JLabel TelefonLabel;
    private javax.swing.JTextField TelefonTextfield;
    private javax.swing.JButton UppdateraAgent;
    private javax.swing.JButton UppdateraKontorsChef;
    private javax.swing.JButton UppdateraOmradesChef;
    private javax.swing.JButton VisaAgent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
